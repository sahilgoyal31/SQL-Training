#Q1. Print product, price, sum of quantity more than 5 sold during all three months.  
Select product, round(sum(price),2) sales from bank_inventory_pricing group by product having sum(Quantity) >5

#Q2.Print product, quantity , month and count of records for which estimated_sale_price is less than purchase_cost
Select product, month, sum(quantity), count(*) from bank_inventory_pricing where estimated_sale_price < purchase_cost group by product, month


#Q3. Extarct the 3rd highest value of column Estimated_sale_price from bank_inventory_pricing dataset
Select * from bank_inventory_pricing order by Estimated_sale_price desc limit 2,1


#Q4. Count all duplicate values of column Product from table bank_inventory_pricing
Select product from bank_inventory_pricing group by product having count(*) >1



#Q5. Create a view 'bank_details' for the product 'PayPoints' and Quantity is greater than 2 
Create view  ‘bank_details’ as select * from  bank_inventory_pricing where product = “PayPoints” and quantity > 2


#Q6 Update view bank_details1 and add new record in bank_details1.
-- --example(Producct=PayPoints, Quantity=3, Price=410.67)
UPDATE bank_inventory_pricing
Set Product ="PayPoints",Quantity =3,Price=410.67


#Q7.Real Profit = revenue - cost  Find for which products, branch level real profit is more than the estimated_profit in Bank_branch_PL.
Select branch, product, sum(estimated_profit) EP, sum(revenue -cost) RP from bank_branch_pl group by branch, product having RP >EP

#Q8.Find the least calculated profit earned during all 3 periods
Select month, sum(revenue-cost) profit from bank_branch_pl group by month order by profit limit 1


#Q9. In Bank_Inventory_pricing, 
-- a) convert Quantity data type from numeric to character 
-- b) Add then, add zeros before the Quantity field.  
SELECT lpad(convert(quantity, char),4,'0') from Bank_inventory_pricing


#Q10. Write a MySQL Query to print first_name , last_name of the titanic_ds whose first_name Contains ‘U’
Select * from employee_details where first_name like “%U%”


#Q11.Reduce 30% of the cost for all the products and print the products whose  calculated profit at branch is exceeding estimated_profit .
Select branch, product, sum(revenue-(cost*0.7)) CP, sum(estimated_profit) EP from bank_branch_pl group by branch,product having CP >EP


#Q12.Write a MySQL query to print the observations from the Bank_Inventory_pricing table excluding the values “BusiCard” And “SuperSave” from the column Product
Select * from bank_inventory_pricing where product NOT IN (“BusiCard”, “SuperSave”)


#Q13. Extract all the columns from Bank_Inventory_pricing where price between 220 and 300
Select * from Bank_Inventory_pricing where price >= 220 and price <=300


#Q14. Display all the non duplicate fields in the Product form Bank_Inventory_pricing table and display first 5 records.
Select distinct product from Bank_Inventory_pricing order by product limit 5


#Q15.Update price column of Bank_Inventory_pricing with an increase of 15%  when the quantity is more than 3.
Update Bank_Inventory_pricing set price = Price*1.15 where quantity > 3 and price is not null


#Q16. Show Round off values of the price without displaying decimal scale from Bank_Inventory_pricing
Select round(price,0) from Bank_Inventory_pricing


#Q17.Increase the length of Product size by 30 characters from Bank_Inventory_pricing.
Alter table bank_inventory_pricing modify Product varchar(30);


#Q18. Add '100' in column price where quantity is greater than 3 and dsiplay that column as 'new_price' 
Select product, price, (price+100) new_price from bank_inventory_pricing where quantity>3 and price is not null


#Q19. Display all saving account holders have “Add-on Credit Cards" and “Credit cards" 
Select * from bank_account_details a where a.account_type  IN ("Add-on Credit Card" ,"Credit Card") and a.customer_id IN (SELECT distinct b.Customer_id FROM bank.bank_account_details b where b.Account_type = "SAVINGS")


#Q20.
# a) Display records of All Accounts , their Account_types, the transaction amount.
Select a.account_number, account_type, transaction_amount from bank_account_transaction a left outer join bank_account_details b on a.account_number = b.account_number 

# b) Along with first step, Display other columns with corresponding linking account number, account types 
Select a.account_number, b.account_type, transaction_amount, linking_account_number from 
bank_account_transaction a 

left outer join bank_account_details b 
on a.account_number = b.account_number  

left outer join bank_account_relationship_details c 
on a.account_number = c.account_number


# c) After retrieving all records of accounts and their linked accounts, display the  transaction amount of accounts appeared  in another column.
ALTER TABLE bank_account_relationship_details ADD COLUMN Transaction_amount double;
UPDATE bank_account_relationship_details t1
INNER JOIN bank_account_transaction t2 ON t1.Account_Number = t2.Account_Number 
SET t1.Transaction_amount = t2.Transaction_amount;
SELECT * FROM bank.bank_account_relationship_details;


#Q21.Display all type of “Credit cards”  accounts including linked “Add-on Credit Cards" 
# type accounts with their respective aggregate sum of transaction amount. 
# Ref: Check linking relationship in bank_transaction_relationship_details.
# Check transaction_amount in bank_account_transaction. 
Select a.account_number, account_type, sum(transaction_amount )
from bank_account_transaction a 
left outer join bank_account_details b 
on a.account_number = b.account_number 
where account_type IN (“Credit Card”, "Add-on Credit Card")
group by a.account_number



#Q22. Compare the aggregate transaction amount of current month versus aggregate transaction with previous months.
# Display account_number, transaction_amount , 
-- sum of current month transaction amount ,
-- current month transaction date , 
-- sum of previous month transaction amount , 
-- previous month transaction date.
Select * from 
(SELECT account_number, sum(transaction_amount) from bank_account_transaction y where month(transaction_date) != month(current_timestamp()) group by account_number) a
Full outer join
(SELECT account_number, sum(transaction_amount) from bank_account_transaction x where month(transaction_date) = month(current_timestamp()) group by account_number) b
On a.account_number = b.account_number 




#Q23.Display individual accounts absolute transaction of every next  month is greater than the previous months .



#Q24. Find the no. of transactions of credit cards including add-on Credit Cards
    SELECT Account_type,count(*) FROM bank.bank_account_details group by Account_type having Account_type='Credit Card' or Account_type='Add-on Credit Card';


#Q25.From employee_details retrieve only employee_id , first_name ,last_name phone_number ,salary, job_id where department_name is Contracting (Note
#Department_id of employee_details table must be other than the list within IN operator.
ALTER TABLE employee_details ADD COLUMN Department_Name Text;
UPDATE employee_details t1
INNER JOIN department_details t2 ON t1.employee_id = t2.employee_id 
SET t1.Department_Name = t2.Department_Name;
SELECT employee_id ,first_name ,last_name,phone_number ,salary, job_id,DEPARTMENT_Name FROM bank.employee_details where DEPARTMENT_Name='Contracting';

#Q26. Display savings accounts and its corresponding Recurring deposits transactions are more than 4 times.
Select * from bank_account_details a where a.account_type  IN ("RECCURING") and a.customer_id IN (SELECT distinct b.Customer_id FROM bank.bank_account_details b where b.Account_type = "SAVINGS")

#Q27. From employee_details fetch only employee_id, ,first_name, last_name , phone_number ,email, job_id where job_id should not be IT_PROG.
SELECT employee_id ,first_name ,last_name,phone_number ,email, job_id FROM bank.employee_details where job_id!='IT_PROG';


#Q29.From employee_details retrieve only employee_id , first_name ,last_name phone_number ,salary, job_id where manager_id is '60' (Note
#Department_id of employee_details table must be other than the list within IN operator.
SELECT employee_id ,first_name ,last_name,phone_number ,salary, job_id FROM bank.employee_details where MANAGER_ID = '60';


#Q30.Create a new table as emp_dept and insert the result obtained after performing inner join on the two tables employee_details and department_details.
Create table emp_dept as 
select 
b.employee_id, 
first_name,
last_name,
email,
phone_number,
hire_date,
job_id,
salary,
b.department_id, 
department_name, 
a.manager_id, 
location_id
from 
department_details a join employee_details b 
on a.department_id = b.department_id
